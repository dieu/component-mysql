# MySQL Server
application:
  configuration:
    configuration.db-port: 3306
    configuration.db-root-password: "uR1zaebah0Qu"
    configuration.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-mysql-dev-cookbooks-stable-9b6eef5.tar.gz"
    compute.hardwareId: "c3.large"
    compute.imageId:    "ami-26971e4e"
    compute.login:      "root"
    compute.locationId: "us-east-1"
  interfaces: 
    configuration:
      "*": "bind(workflow#input.*)"
    compute:
      hardwareId: "bind(compute#configuration.hardwareId)"
      imageId:    "bind(compute#configuration.imageId)"
      login:      "bind(compute#configuration.login)"
      locationId: "bind(compute#configuration.locationId)"
    mysql:
      "*": "bind(workflow#result.*)"
  components:
    workflow:
      type: workflow.Instance
      interfaces:
        input:
          db-port:            { type: configuration(int),          name: Database listen port     }
          db-root-password:   { type: configuration(string),       name: Database root password   }
          db-user:            { type: configuration(string),       name: Database user name       }
          db-user-password:   { type: configuration(string),       name: Database user password   }
          db-user-privileges: { type: configuration(list<string>), name: Database user privileges }
          recipe-url:         { type: configuration(string),       name: Cookbooks url            }
          sql-url:            { type: configuration(list<string>), name: Schema SQL urls           }
        compute:
          networks:        consume-signal(map<string, map<string, string>>)
          exec:            send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:        send-command(string filename, bytes payload)
          get-file:        send-command(string filename => bytes payload)
        actions:
          update: receive-command()
        result:
          db-host:             { type: publish-signal(string), name: Database host          }
          db-port:             { type: publish-signal(int),    name: Database listen port   }
          db-root-user:        { type: publish-signal(string), name: Database root user     }
          db-root-password:    { type: publish-signal(string), name: Database root password }
          db-user:             { type: publish-signal(string), name: Database user          }
          db-user-password:    { type: publish-signal(string), name: Database user password }
          db-driver:           { type: publish-signal(string), name: JDBC driver            }
          db-validation-query: { type: publish-signal(string), name: Validation SQL query   }
          db-connection-url:   { type: publish-signal(string), name: JDBC url               }
      required: [ compute ]
      configuration:
        configuration.triggers:
          input.db-port:            update
          input.db-root-password:   update
          input.db-user:            update
          input.db-user-password:   update
          input.db-user-privileges: update
          input.recipe-url:         update
          compute.networks:         update
        configuration.propagateStatus: [ update ]
        configuration.workflows:  
          launch:
            steps:
              - update:
                  action: update
                  output:
                    db-host:             db-host
                    db-root-user:        db-root-user
                    db-driver:           db-driver
                    db-validation-query: db-validation-query
                    db-connection-url:   db-connection-url
              - run-sql:
                  action: "chefsolo"
                  precedingPhases: [ update ]
                  parameters:
                    roles: [ compute ]
                    runList: [ "recipe[mysql_component::file_query]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        db-port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-user}"
                          username: "{$.db-user}"
                          password: "{$.db-user-password}"
                        sql_url: "{$.sql-url}"         
            return:
              db-host:             { value: "{$.db-host}"             }
              db-port:             { value: "{$.db-port}"             }
              db-root-user:        { value: "{$.db-root-user}"        }
              db-root-password:    { value: "{$.db-root-password}"    }
              db-user:             { value: "{$.db-user}"             }
              db-user-password:    { value: "{$.db-user-password}"    }
              db-driver:           { value: "{$.db-driver}"           }
              db-validation-query: { value: "{$.db-validation-query}" }
              db-connection-url:   { value: "{$.db-connection-url}"   }
          update:
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - install-mysql-db:
                  action: "chefsolo"
                  precedingPhases: [ get-signals ]
                  parameters:
                    roles: [ compute ]
                    runList: ["recipe[mysql_component]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        server_repl_password: "{$.db-root-password}"
                        server_debian_password: "{$.db-root-password}"
                        port: "{$.db-port}"
              - create-db:
                  action: "chefsolo"
                  precedingPhases: [ install-mysql-db ]
                  parameters:
                    roles: [ compute ]
                    runList: [ "recipe[mysql_component::db_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-user}"
                          db_action: "create"
              - create-user:
                  action: "chefsolo"
                  precedingPhases: [ create-db ]
                  parameters:
                    roles: [ compute ]
                    runList: [ "recipe[mysql_component::user_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        db-port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-user}"
                          username: "{$.db-user}"
                          password: "{$.db-user-password}"
                          privileges: "{$.db-user-privileges}"
                          action: "grant"
                        hosts: ["%"]
            return:
              db-host:             { value: "{$.signals.compute.networks.public.ip}" }
              db-port:             { value: "{$.db-port}" }
              db-root-user:        { value: "root" }
              db-root-password:    { value: "{$.db-root-password}" }
              db-user:             { value: "{$.db-user}" }
              db-user-password:    { value: "{$.db-user-password}" }
              db-driver:           { value: "com.mysql.jdbc.Driver" }
              db-validation-query: { value: "select 1" }
              db-connection-url:   { value: "jdbc:mysql://{$.signals.compute.networks.public.ip}:{$.db-port}/{$.db-user}?autoReconnect=true" }
    compute:
      type: compute.Instance
  bindings:
   - [workflow#compute, compute]
